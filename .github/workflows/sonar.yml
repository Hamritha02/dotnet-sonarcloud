name: SonarCloud Analysis Report

on:
  push:
    branches:
      - master

jobs:
  sonarcloud:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.x

      - name: Install dependencies
        run: pip install requests

      - name: Retrieve SonarCloud analysis report
        run: |
          python - <<EOF
          import requests
          from requests.auth import HTTPBasicAuth
          import json

          def get_sonarcloud_analysis_report(organization, project_key, token):
              base_url = 'https://sonarcloud.io/api/'
              api_version = '1.2'  # Replace with the appropriate API version

              # Construct the URL for the API endpoint
              api_url = f'{base_url}{api_version}/'
              print("api_url : ",api_url)
              # Endpoint to retrieve project analysis report
              api_endpoint = f'project_analyses/search?project={project_key}'
              print("api_endpoint : ",api_endpoint)
              # Set the authentication token in the request header
              headers = {'Authorization': f'Bearer {token}'}

              # Make the API request
              response = requests.get(api_url + api_endpoint, headers=headers)
              print("API request url : ",response.content)
              if response.status_code == 200:
                                            
                 analysis_reports = response.json()['analyses']
                 return analysis_reports
              else:
                  print(f'Failed to retrieve analysis report. Status code: {response.status_code}')
                  return None

          # Set your organization, project key, and authentication token
          organization = 'hamritha02-1'
          project_key = 'Hamritha02_Assignment2'
          token = '${{ secrets.SONAR_TOKEN }}'

          # Call the function to get the analysis reports
          reports = get_sonarcloud_analysis_report(organization, project_key, token)
          print("reports:", reports)
          if reports:
            with open('sonarcloud_report.json', 'w') as file:
              json.dump(reports, file)
            print('Analysis report saved to sonarcloud_report.json.')
            
          else:
            print('No analysis reports found.')
          
          # Process the analysis reports
          if reports:
              for report in reports:
                  analysis_date = report['date']
                  analysis_key = report['key']
                  print(f'Analysis key: {analysis_key}, Analysis date: {analysis_date}')
          else:
              print('No analysis reports found.')
              sys.exit(1) 
          EOF
        env:
          ORGANIZATION: hamritha02-1
          PROJECT_KEY: Hamritha02_Assignment2
          TOKEN: ${{ secrets.SONAR_TOKEN }}
          
      #- name: A/B Check
       # if: ${{ envA }} != ${{ envB }}
       # uses: actions/github-script@v3
       # with:
        #  script: |
         #   core.setFailed('envA and envB are not equivalent!')
   
      - name: Publish report
        if: always()
        uses: actions/upload-artifact@v2
        with:
          name: reports
          path: |
           **/sonarcloud_report.json
           **/sonarcloud_report.xml
      - name: Send mail
      #continue-on-error: true
        if: always()
        env:
          SMTP_SERVER: smtp.gmail.com
          SMTP_PORT: 465
          SMTP_USERNAME: ${{ secrets.EMAIL_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.EMAIL_PASSWORD }}
    
        run: |
          #echo "Subject: Workflow failed" | sendmail -v -S $SMTP_SERVER -P $SMTP_PORT -xu $SMTP_USERNAME -xp $SMTP_PASSWORD hamrithaanand02@gmail.com
          run: |
          echo "subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }}" > email.txt
          echo -e "From: SMTP_USERNAME\nTo: hamrithaanand02@gmail.com\n" >> email.txt
          echo -e "The status of workflow run.subject: ${{ github.job }} job of ${{ github.repository }} has ${{ job.status }} \n" >> email.txt
          cat email.txt | curl --url "smtps://$SMTP_SERVER:$SMTP_PORT" --ssl-reqd --mail-from "Hamritha" --mail-rcpt "hamrithaanand02@gmail.com" --user "$SMTP_USERNAME:$SMTP_PASSWORD" -T -
